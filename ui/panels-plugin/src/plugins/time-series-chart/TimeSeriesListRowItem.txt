// Copyright 2022 The Perses Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import React from 'react';
import { Box, ListItemText, ListItem } from '@mui/material';
import { useContextSelector } from 'use-context-selector';
import { MonitorSeries } from './monitor-series';
import { MonitorsContext } from './MonitorContextProvider';
import { LegendColorBadge } from './LegendColorBadge';
import { AlertStateIcon } from '@/components';

interface TimeSeriesListRowItemProps {
  series: MonitorSeries;
}

/**
 * Displays a single list of time series labels
 */
export const TimeSeriesListRowItem = React.memo(function TimeSeriesListItem({ series }: TimeSeriesListRowItemProps) {
  const isSelected = useContextSelector(MonitorsContext, ({ selectedSeriesIds }) =>
    selectedSeriesIds.includes(series.id)
  );
  const setSelectedSeriesIds = useContextSelector(MonitorsContext, ({ setSeriesIds }) => setSeriesIds);

  const seriesLabel = getSeriesLabel(series.labels);

  const onMultiSelect = () =>
    setSelectedSeriesIds((selectedSeriesIds) => {
      const seriesIndex = selectedSeriesIds.indexOf(series.id);
      if (seriesIndex !== -1) {
        const result = [...selectedSeriesIds];
        result.splice(seriesIndex);
        return result;
      }
      return [...selectedSeriesIds, series.id];
    });

  const onClick = () =>
    setSelectedSeriesIds((selectedSeries) => {
      if (selectedSeries.includes(series.id)) {
        return [];
      } else {
        return [series.id];
      }
    });

  return (
    <ListItem
      dense={true}
      sx={{
        display: 'flex',
        paddingTop: 0,
        paddingBottom: 0,
        cursor: 'pointer',
      }}
      key={series.id}
      onClick={(e) => {
        if (e.metaKey || e.ctrlKey) {
          onMultiSelect?.();
        } else {
          onClick?.();
        }
      }}
      selected={isSelected}
    >
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        <AlertStateIcon
          sx={{ display: 'flex', alignItems: 'center' }}
          alertState={series.chronosphere_severity_status}
        />
      </Box>
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        <LegendColorBadge id={series.name} />
      </Box>
      <ListItemText primary={seriesLabel}></ListItemText>
    </ListItem>
  );
});

export function getSeriesLabel(labels: Record<string, string>) {
  let keys = '';
  if (labels['__name__']) {
    keys = keys.concat(labels['__name__']);
  }
  keys = keys.concat('{');

  const labelKeys = Object.keys(labels);
  labelKeys.forEach((seriesKey, index) => {
    if (seriesKey !== '__name__') {
      keys = keys.concat(`${seriesKey}="${labels[seriesKey]}"${index < labelKeys.length - 1 ? ', ' : ''}`);
    }
  });
  keys = keys.concat('}');
  return keys;
}
